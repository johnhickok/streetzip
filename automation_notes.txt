STATEWIDE STREET NAME & ZIP CODE LOOKUP (STREETZ)

Having a current database of statewide street names with their corresponding ZIP Codes is a useful tool for many uses. Spatially joining GIS datasets as large as California's almost a million streets and 1700 ZIP Code polygons is a little hard to do with traditional desktop GIS software, and that is the reason this project was created.

This project is not formal geocoding. ZIP code values obtained by geospatial joining are at best a guess. Some incorrect spellings may exist for some streets after special characters are removed. This project's purpose is to create data that will enhance your geocoding searches when miscommunication errors occur.

On Windows, open source GIS installations set up a separate Python environment to allow Esri and OSGeo ecosystems to coexist peacefully, hence the tasks are split in the examples shown. Linux and Mac users can combine the two steps into a single scheduled task. If Esri's ArcGIS is installed, the tasks can also be combined when one of the steps is replaced by a Python script using Esri's arcpy library.

TASK1.bat

1. python geofabrik_download_california.py

Python script downloads California OpenStreetMap data, unpacks the roads shapefile roads.shp, and delets the other OpenStreetMap data you're not going to need.


2. call "C:\Program Files\QGIS Essen\bin\o4w_env.bat"

This step may vary depending on which version of QGIS you installed. The batch file o4w_env.bat sets the environment variables so your Windows Console can run GDAL/OGR geoprocessing tools.


3. ogr2ogr -f CSV roads_wkt.csv roads.shp -lco GEOMETRY=AS_WKT

This step uses ogr2ogr to convert your roads shapefile roads.shp into a comma separated value roads_wkt.csv. Simple features geometry is expressed as Well Known Text values for each feature.

NOTE: If you have ArcGIS installed, you can replace Steps 2 and 3 with Python and Esri's arcpy library. Please see Esri's support center, "Reading geometries" (http://desktop.arcgis.com/en/arcmap/latest/analyze/python/reading-geometries.htm)



TASK2.bat

1. python convert_utf8.py

The script inputs roads_wkt.csv, extracts street features with non null street names, and parses each feature into a PostGIS INSERT statement that includes only the street name and its geometry. The script also uses the unidecode Python library to transliterate special characters to their UTF-8 equivalents. The final output is roads_wkt_utf8.sql.


2. psql -h localhost -p 5432 -U postgres -d test_joins -q -c "TRUNCATE TABLE roads;"

'psql' is how you access your PostGIS from the command line.
'-h localhost' says you are accessing PostGIS as installed on your local PC.
'-p 5432' is the port you are using for PostGIS.
'-U postgres' is the PostGIS user name. This username is popular for beginners, but not a good approach if PostGIS is on a multi-user server.
'-d test_joins' is your database name.
'-q' says you are running in "quiet" mode. Statement results are not shown on the console.
'-c "TRUNCATE TABLE roads;"' truncates your roads table.


3. psql -h localhost -p 5432 -U postgres -d test_joins -q -c "DROP INDEX road_geom_idx;"

The parameters are the same as above, except it removes your spatial index.


4. psql -h localhost -p 5432 -U postgres -d test_joins -q -f roads_wkt_utf8.sql

The parameters are similar to the above, except it's going to execute statements in a file roads_wkt_utf8.sql. This step may take a while, depending on your PC hardware. California will have over 800,000 insert statements to run.


5. psql -h localhost -p 5432 -U postgres -d test_joins -q -c "VACUUM ANALYZE roads;"

Adding a vacuum analyze statement is a good practice after batch inserting a lot of records. This step helps your PostGIS database run faster.


6. psql -h localhost -p 5432 -U postgres -d test_joins -q -c "CREATE INDEX road_geom_idx ON roads USING gist(geom);"

This step re-creates your spatial index on your roads table.


7. psql -h localhost -p 5432 -U postgres -d test_joins -q -o streetz.csv -A -t -f street_zip_summary.sql

This statement includes a few parameters in addition to what we listed in Step 2:
'-o streetz.csv' says you are going to output this statement's results into streetz.csv.
'-A' says your comma separated text file output will not be aligned text.
'-t' says you want tuples only. Your csv output will not include field names in the first row.
'-f street_zip_summary.sql' will use PostGIS' spatial functions in file street_zip_summary.sql to create streetz.csv which lists every street name with its corresponding ZIP Code and postal city.


8. python make_sqlite_db.py

This final step uses Python create a SQLite database streetz.db with table streetz. The script imports values from streetz.csv into the streetz table and creates an index for speed.
